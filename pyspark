###################Library#####################
import json
import pandas as pd
from pandas import ExcelWriter
import os
from itertools import zip_longest
import xlrd
import xlsxwriter
import openpyxl

################################################

#master data excel
master_data_excel = 'C:\\projects\\Master_Data.xlsx'

#Path test meassges output folder
test_message_path='C:\\projects\\output'

#Excel generated by reading final.json files
generate_data_excel= 'C:\\projects\\Finaljson.xlsx'

#A difference excel generated
comparison_excel_path='C:\\projects\\Difference.xlsx'

####################################################

def word_format_correction(dataframe):
    for index, row in dataframe.iterrows():
        msg = dataframe.get_value(index,'format')
        if("Word Doc" in msg):
            dataframe.set_value(index, 'format', 'Word')               
        else:
            dataframe.set_value(index, 'format', msg)
    
    return dataframe
     
    
def report_diff(x):
    return x[0] if x[0] == x[1] else '{} ---> {}'.format(*x)
    
def has_change(row):
    
    #Ignoring format column in comparison
    row = row.drop(['format'])
    
    if "--->" in row.to_string():
        return "NOT MATCHING ROW"
    else:
        return "MATCHING ROW"

def remaining_rows_detail(df1,df2):
    result = pd.DataFrame()
    common = df2.merge(df1,on=['message','cheque'])
    result  = df1[(~df1.message.isin(common.message))|(~df1.cheque.isin(common.cheque))]   
    return result


def remaining_rows_summary(df3,df4):
    result = pd.DataFrame()
    common = df3.merge(df4,on=['message'])
    result  = df4[(~df4.message.isin(common.message))]
    return result


def format_correction(dataframe):
    for index, row in dataframe.iterrows():
        st = dataframe.get_value(index,'format')
        st = st.strip()
        if("--->" in st):
            if(st.split("--->")[0] == "nan"):
                dataframe.set_value(index, 'masterformat', st.split("--->")[1].strip())
            else:
                dataframe.set_value(index, 'masterformat', st.split("--->")[0].strip())
                
        else:
            
            dataframe.set_value(index, 'jsonformat', st)
            dataframe.set_value(index, 'masterformat', st)
    
    return dataframe
################################################################################

df_final = pd.DataFrame()
df_agg = pd.DataFrame()

SUCCESS_STRING = 'MATCHING ROW'

output_message_directory = [ name for name in os.listdir(test_message_path) ] 

for i in output_message_directory:
    
    output_message_path = test_message_path + '\\' + i + '\\final.json'
    message_number = (output_message_path.split("\\")[3]).replace('Test ','')    

    
    with open(output_message_path) as json_data:
        data = json.load(json_data)
    
    try:
        account = data['Transaction']['TransactionTable']['account']
    except:
        account = []
    try:
        sort = data['Transaction']['TransactionTable']['sort']
    except:
        sort = []
    try:
        cheque = data['Transaction']['TransactionTable']['cheque']
    except:
        cheque = []
    try:
        amount = data['Transaction']['TransactionTable']['amount']
    except:
        amount = []
    try:
        person = data['Transaction']['TransactionTable']['person']
    except:
        person = []
    try:
        date_column = data['Transaction']['TransactionTable']['date']
    except:
        date_column = []
    try:  
        format_column = data['Attachment']['AttachmentDetails']['FileType'][0]
    except:
        format_column = []
    try:
        company = []
    except:
        company = []
    
 
    dataframe = {   'Message' :  [message_number],
                    'company' : company,
                    'account' : account ,
                    'sort' : sort ,
                    'cheque': cheque ,
                    'amount' : amount ,
                    'person' : person ,
                    'date' : date_column,
                    'format' : [format_column]
                }

    dataframe_temp = pd.DataFrame.from_dict(dataframe, orient='index')
    dataframe_temp = pd.DataFrame(data = dataframe_temp.transpose(),columns=['message',  'company', 'account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format'])   
    dataframe_temp.message = dataframe_temp.message.fillna(message_number)
    dataframe_temp.format = dataframe_temp.format.fillna(format_column)
    
    df_final = df_final.append(dataframe_temp)
                   
writer = ExcelWriter(generate_data_excel)

df_final = pd.DataFrame(word_format_correction(df_final.reset_index()))

#Convertion to sting 
df_final['date'] = df_final['date'].astype(str)

df_final.to_excel(writer,sheet_name='Sheet1',index = False)

df_agg = pd.DataFrame(df_final.groupby(['message','format'])[['message', 'format']].size().reset_index())
df_agg.columns = ['message','format', 'count']
df_agg = pd.DataFrame(word_format_correction(df_agg.reset_index()))
df_agg.to_excel(writer,sheet_name='Sheet2',index = False)
writer.save()

########################################################################
# Finding the Difference
#######################################################################
    

df_GEN = pd.DataFrame()
df_MAS = pd.DataFrame()   
df_MAS_remaining = pd.DataFrame()
df_final_diff_summ = pd.DataFrame()
df_final_diff_rows = pd.DataFrame()
df_result = pd.DataFrame()

writer2 = ExcelWriter(comparison_excel_path, engine='openpyxl')

df1 = pd.read_excel(generate_data_excel, 'Sheet1',converters={'message':str,'account':str ,'sort':str ,'cheque':str ,'person':str ,'format':str,'date':str},usecols =['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format'], na_values=['NA'])
df2 = pd.read_excel(master_data_excel, 'Sheet1',converters={'message':str,'account':str ,'sort':str ,'cheque':str ,'person':str ,'format':str,'date':str},usecols  =['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format'], na_values=['NA'])

df3 = pd.read_excel(master_data_excel, 'Sheet2',usecols  =['message','format', 'count'], na_values=['NA'])
df4 = pd.read_excel(generate_data_excel, 'Sheet2',usecols =['message','format', 'count'], na_values=['NA'])

###########################################################################################
# Detailed rows and compare with generated list from final.json
###########################################################################################

for index, row in df3.iterrows():
    
    if(row['message'] in list(df4['message'])):   
        
        df_GEN = df3.loc[(df3['message'] == row['message'])]
        df_MAS = df4.loc[(df4['message'] == row['message'])]

        
        df_GEN = df_GEN.reset_index(drop=True)
        df_MAS = df_MAS.reset_index(drop=True)        
                        
        diff_panel_agg = pd.Panel()            
        diff_panel_agg = pd.Panel(dict(df_GEN=df_GEN,df_MAS=df_MAS))             
        diff_output_agg = diff_panel_agg.apply(report_diff, axis=0)                
        diff_output_agg['has_change'] = diff_output_agg.apply(has_change, axis=1)                   
        diff_output_agg = pd.DataFrame(diff_output_agg)
            
            
        diff_output_agg.columns = ['message','format', 'count','has_change']
        df_final_diff_summ = df_final_diff_summ.append(diff_output_agg)
    else:
        df_MAS_remaining = pd.DataFrame.from_dict(row.to_dict(), orient='index').transpose()
        df_MAS_remaining['has_change'] = 'ADDITION IN MASTERDATA'
        df_MAS_remaining = df_MAS_remaining[['message','format', 'count','has_change']]

    
try:
    
    df_result = remaining_rows_summary(df3,df4)
    
    if(not df_result.empty):
        df_result['has_change'] = 'ADDITION IN FINALJSON'
        df_final_diff_summ = df_final_diff_summ.append(df_result)  
    
    df_final_diff_summ.columns = ['message','format', 'count','has_change']
    df_final_diff_summ.to_excel(writer2,sheet_name='Count_Difference',index = False)
    
    
    
except:
    df_final_diff_summ = pd.DataFrame(columns=['message','format', 'count','has_change'])
    df_final_diff_summ = df_final_diff_rows.fillna(0) 
    df_final_diff_summ.to_excel(writer2,sheet_name='Count_Difference',index = False)    
    print("issue in Summary wise comparison")


#############################################################################################
# Summarized rows and compare with generated list from final.json
#############################################################################################
for index, row in df2.iterrows():

    if(row['message'] in list(df1['message']) and row['cheque'] in list(df1['cheque'])):
        
        df_GEN = df2.loc[(df2['message'] == row['message']) & (df2['cheque'] == row['cheque'])]
        df_MAS = df1.loc[(df1['message'] == row['message']) & (df1['cheque'] == row['cheque'])]
        
        
        df_GEN = df_GEN.reset_index(drop=True)
        df_MAS = df_MAS.reset_index(drop=True)
        
 
        diff_panel_agg = pd.Panel()            
        diff_panel_agg = pd.Panel(dict(df_GEN=df_GEN,df_MAS=df_MAS))            
        diff_output_agg = diff_panel_agg.apply(report_diff, axis=0)
        diff_output_agg['has_change'] = diff_output_agg.apply(has_change, axis=1)
        diff_output_agg = pd.DataFrame(diff_output_agg)
                        
        diff_output_agg.columns = ['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format','has_change']
        df_final_diff_rows = df_final_diff_rows.append(diff_output_agg)
    else:
        df_MAS_remaining = pd.DataFrame.from_dict(row.to_dict(), orient='index').transpose()
        df_MAS_remaining['has_change'] = 'ADDITION IN MASTERDATA'
        df_MAS_remaining = df_MAS_remaining[['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format','has_change']]
        df_final_diff_rows = df_final_diff_rows.append(df_MAS_remaining)
   
     
try:
    
    df_result = remaining_rows_detail(df1,df2)
    
    if(not df_result.empty):
        df_result['has_change'] = 'ADDITION IN FINALJSON'
        df_final_diff_rows = df_final_diff_rows.append(df_result)    
         
    df_final_diff_rows.columns = ['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format','has_change']
    df_final_diff_rows.to_excel(writer2,sheet_name='Detailed_Difference',index = False)
    
    
except:
    df_final_diff_rows = pd.DataFrame(columns=['message','account' ,'sort' ,'cheque' ,'amount' ,'person' ,'date','format','has_change'])
    df_final_diff_rows = df_final_diff_rows.fillna(0) 
    df_final_diff_rows.to_excel(writer2,sheet_name='Detailed_Difference',index = False)
    print("issue in Row wise comparison")


        
#################################################################################
#Success Indicator Sheet - Sheet 3
#################################################################################                        

df1 = pd.DataFrame(df_final_diff_rows[['message','has_change']].reset_index())
df2 = pd.DataFrame(df_final_diff_summ[['message','format','has_change']].reset_index())

df1['message'] = df1['message'].str.extract('(\d+)', expand=False)
df2['message'] = df2['message'].str.extract('(\d+)', expand=False)


df2 = format_correction(df2)

df_result = pd.DataFrame(df1.groupby(['message']).has_change.unique().reset_index())



for index, row in df_result.iterrows():
    
    msg_details_no = df_result.get_value(index, 'message')        
    msg_details_list = df_result.get_value(index, 'has_change')       
    msg_summary_no = df2['message'][ (df2['message'] == msg_details_no)].values[0]        
    msg_summary_format = df2['masterformat'][ (df2['message'] == msg_summary_no)].values[0]
    msg_summary_list = ""
    msg_summary_list = df2['has_change'][ (df2['message'] == msg_summary_no)].values[0] 
    
    if( SUCCESS_STRING in list(row['has_change']) and len(list(row['has_change'])) == 1 ):
        if(SUCCESS_STRING == msg_summary_list):   
            #print(msg_summary_no,msg_summary_list)         
            df_result.set_value(index, 'success_indicator', 'Y')
            df_result.set_value(index, 'masterformat', msg_summary_format)
        else:
            df_result.set_value(index, 'success_indicator', 'N')
            df_result.set_value(index, 'masterformat', msg_summary_format)
            
    else:
        df_result.set_value(index, 'success_indicator', 'N')
        df_result.set_value(index, 'masterformat', msg_summary_format)

df_result = df_result[['message','masterformat','success_indicator']]

df_result.to_excel(writer2,sheet_name='SuccessIndicator',index = False)

########################################################################################################################
#Summary Box Sheet4
#######################################################################################################################

df_summary_box_temp = pd.DataFrame(columns=['Item','Total_Messages','Success_Messages','Percentage'])
df_summary_box = pd.DataFrame(columns=['Item','Total_Messages','Success_Messages','Percentage'])
df_summary_box = df_summary_box.fillna(0) 

df_summary_box.set_value(0, 'Item', 'Total no. of messages')
df_summary_box.set_value(0, 'Total_Messages', df_result['message'].count())
df_summary_box.set_value(0, 'Success_Messages', df_result[(df_result['success_indicator'] == 'Y')]['success_indicator'].count())

for i in df_result.masterformat.unique():
    df_summary_box_temp.set_value(0, 'Item', 'Total no. of ' + i + ' message')
    df_summary_box_temp.set_value(0, 'Total_Messages', df_result[ (df_result['masterformat'] == i) ]['message'].count())
    df_summary_box_temp.set_value(0, 'Success_Messages', df_result[ (df_result['masterformat'] == i) & (df_result['success_indicator'] == 'Y') ]['message'].count())
    
    df_summary_box = df_summary_box.append(df_summary_box_temp)
    

df_summary_box['Percentage'] = (df_summary_box['Success_Messages']/df_summary_box['Total_Messages'])*100
df_summary_box.to_excel(writer2,sheet_name='Summary',index = False)


writer2.save()



